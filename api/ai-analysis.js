// ===================================================================
// FINAL, VERIFIED AI ANALYST BRAIN with Deep Analysis
// ===================================================================
const { GoogleGenerativeAI } = require("@google/generative-ai");

// Access your API key as an environment variable
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

module.exports = async (request, response) => {
    // We need to use POST to send a large amount of data
    if (request.method !== 'POST') {
        return response.status(405).json({ error: "Method Not Allowed" });
    }

    try {
        const stockData = request.body;
        if (!stockData || !stockData.name) {
            throw new Error("Stock data is missing.");
        }

        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

        // --- THE NEW "MASTER PROMPT" ---
        const prompt = `
            You are a world-class, unbiased, data-driven stock market analyst. Your name is 'Gemini Analyst'.
            Your task is to generate a comprehensive, multi-part report based ONLY on the provided JSON data for the company ${stockData.name}.
            Do NOT use any external knowledge. Do NOT give financial advice or price targets.
            Your entire response must be formatted in clean, professional HTML.

            Here is the structure of the report you must generate:

            <h3>Overall Verdict</h3>
            <p>A single, powerful sentence summarizing the stock's current situation based on a blend of technicals and fundamentals.</p>

            <h3>Technical Analysis</h3>
            <h4>Trend Analysis</h4>
            <p>Analyze the relationship between the current price and the 20-day and 50-day EMAs. State if the trend is bullish, bearish, or mixed. Mention if any significant moving average crossovers have occurred.</p>
            <h4>Momentum Analysis</h4>
            <p>Analyze the RSI, MACD, and Stochastic indicators. State whether momentum appears to be bullish, bearish, oversold, or overbought, and explain why based on the data.</p>
            
            <h3>Fundamental Analysis</h3>
            <h4>Valuation</h4>
            <p>Analyze the company's valuation based on the Graham Scan result. Explain whether it passes or fails the criteria for a value investment based on the provided data.</p>
            <h4>Financial Health</h4>
            <p>Analyze the company's financial strength using the Piotroski F-Score. A score of 7-9 is strong, 4-6 is neutral, and 0-3 is weak. Briefly explain what the score implies.</p>
            <h4>Ownership Insights</h4>
            <p>Analyze the FII Shareholding percentage. State whether this indicates high or low institutional confidence.</p>
            
            <h3>SWOT Analysis (Data-Driven)</h3>
            <ul>
                <li><strong>Strengths:</strong> List 2-3 key strengths based ONLY on positive data points from the JSON (e.g., "Currently in oversold territory (RSI < 30)", "Passes Graham value scan").</li>
                <li><strong>Weaknesses:</strong> List 2-3 key weaknesses based ONLY on negative data points (e.g., "Bearish trend with price below 50-day EMA", "Low Piotroski F-Score of 3/9").</li>
                <li><strong>Opportunities:</strong> List 1-2 potential opportunities inferred from the data (e.g., "Oversold conditions could present a mean-reversion opportunity for traders").</li>
                <li><strong>Threats:</strong> List 1-2 potential threats inferred from the data (e.g., "A bearish moving average crossover poses a threat of continued downward momentum").</li>
            </ul>

            <hr>
            <p style="font-size: 12px; color: #888;"><em>Disclaimer: This analysis is auto-generated by Gemini Analyst and is for informational purposes only. It is not financial advice.</em></p>

            JSON Data to be analyzed:
            ${JSON.stringify(stockData, null, 2)}
        `;

        const result = await model.generateContent(prompt);
        const aiResponse = await result.response;
        const analysisText = aiResponse.text();

        // Clean up markdown in case the model adds it
        const cleanHtml = analysisText.replace(/```html/g, '').replace(/```/g, '');

        response.setHeader('Content-Type', 'text/html');
        return response.status(200).send(cleanHtml);

    } catch (error) {
        console.error("AI ANALYSIS ERROR:", error);
        return response.status(500).json({ error: 'Failed to generate AI analysis.', details: error.message });
    }
};